security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: sodium
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        #users_in_memory: { memory: null }
        provedor_usuario:
            id: App\Security\UserConfidential\Provider\UserProvider

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            #lazy: true
            pattern:
                - ^/config
                - ^/SentryTestController
                - ^/transport
                - ^/login
                - ^/cadastro
                - ^/logout
                - ^/user
                - ^/finalizando-cadastro
            provider: provedor_usuario
            custom_authenticators:
                - App\Security\UserConfidential\Authenticate\ApiKeyAuth
                #login_path: app_login
                #check_path: app_login
                #enable_csrf: true
            logout:
                path: /logout
                #target: app_login
                clear_site_data:
                    - cookies
                    - cache
                    - storage
                    - executionContexts

            entry_point: App\Security\Mensagens\AuthenticationEntryPoint
            access_denied_handler: App\Security\Mensagens\AccessDeniedHandler

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: '^/login', roles: PUBLIC_ACCESS }
        - { path: '^/user', roles: ROLE_USER_N2 }
        - { path: '^/finalizando-cadastro', roles: [ROLE_USER_N3, ROLE_USER_N1] }
        - { path: '^/admin', roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
